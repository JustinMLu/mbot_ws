"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class pose3D_t(object):
    __slots__ = ["utime", "x", "y", "z", "angles_rpy", "angles_quat"]

    __typenames__ = ["int64_t", "float", "float", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, [3], [4]]

    def __init__(self):
        self.utime = 0
        self.x = 0.0
        self.y = 0.0
        self.z = 0.0
        self.angles_rpy = [ 0.0 for dim0 in range(3) ]
        self.angles_quat = [ 0.0 for dim0 in range(4) ]

    def encode(self):
        buf = BytesIO()
        buf.write(pose3D_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qfff", self.utime, self.x, self.y, self.z))
        buf.write(struct.pack('>3f', *self.angles_rpy[:3]))
        buf.write(struct.pack('>4f', *self.angles_quat[:4]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != pose3D_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pose3D_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = pose3D_t()
        self.utime, self.x, self.y, self.z = struct.unpack(">qfff", buf.read(20))
        self.angles_rpy = struct.unpack('>3f', buf.read(12))
        self.angles_quat = struct.unpack('>4f', buf.read(16))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if pose3D_t in parents: return 0
        tmphash = (0x39971088b9a8678) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if pose3D_t._packed_fingerprint is None:
            pose3D_t._packed_fingerprint = struct.pack(">Q", pose3D_t._get_hash_recursive([]))
        return pose3D_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", pose3D_t._get_packed_fingerprint())[0]

